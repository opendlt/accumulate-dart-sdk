// GENERATED BY Accumulate gen-sdk. DO NOT EDIT.

import 'dart:convert';
import 'dart:typed_data';

import 'package:http/http.dart' as http;

import 'src/json_rpc_client.dart';
import 'types.dart';

/// Accumulate JSON-RPC API client for
class AccumulateClient {
  final JsonRpcClient _client;

  AccumulateClient(String serverUrl, {http.Client? httpClient})
      : _client = JsonRpcClient(serverUrl, httpClient: httpClient);

  AccumulateClient.withClient(JsonRpcClient client) : _client = client;

  /// queries the basic configuration of the node
  Future<DescriptionResponse> describe() async {
    final result = await _client.call('describe', {});
    return DescriptionResponse.fromJson(result);
  }

  /// submits a transaction
  Future<TxResponse> execute(TxRequest request) async {
    final result = await _client.call('execute', request.toJson());
    return TxResponse.fromJson(result);
  }

  /// submits an AddCredits transaction
  Future<TxResponse> executeAddCredits(TxRequest request) async {
    final result = await _client.call('add-credits', request.toJson());
    return TxResponse.fromJson(result);
  }

  /// submits a BurnTokens transaction
  Future<TxResponse> executeBurnTokens(TxRequest request) async {
    final result = await _client.call('burn-tokens', request.toJson());
    return TxResponse.fromJson(result);
  }

  /// submits a CreateIdentity transaction
  Future<TxResponse> executeCreateAdi(TxRequest request) async {
    final result = await _client.call('create-adi', request.toJson());
    return TxResponse.fromJson(result);
  }

  /// submits a CreateDataAccount transaction
  Future<TxResponse> executeCreateDataAccount(TxRequest request) async {
    final result = await _client.call('create-data-account', request.toJson());
    return TxResponse.fromJson(result);
  }

  /// submits a CreateIdentity transaction
  Future<TxResponse> executeCreateIdentity(TxRequest request) async {
    final result = await _client.call('create-identity', request.toJson());
    return TxResponse.fromJson(result);
  }

  /// submits a CreateKeyBook transaction
  Future<TxResponse> executeCreateKeyBook(TxRequest request) async {
    final result = await _client.call('create-key-book', request.toJson());
    return TxResponse.fromJson(result);
  }

  /// submits a CreateKeyPage transaction
  Future<TxResponse> executeCreateKeyPage(TxRequest request) async {
    final result = await _client.call('create-key-page', request.toJson());
    return TxResponse.fromJson(result);
  }

  /// submits a CreateToken transaction
  Future<TxResponse> executeCreateToken(TxRequest request) async {
    final result = await _client.call('create-token', request.toJson());
    return TxResponse.fromJson(result);
  }

  /// submits a CreateTokenAccount transaction
  Future<TxResponse> executeCreateTokenAccount(TxRequest request) async {
    final result = await _client.call('create-token-account', request.toJson());
    return TxResponse.fromJson(result);
  }

  /// submits a transaction
  Future<TxResponse> executeDirect(ExecuteRequest request) async {
    final result = await _client.call('execute-direct', request.toJson());
    return TxResponse.fromJson(result);
  }

  /// submits an IssueTokens transaction
  Future<TxResponse> executeIssueTokens(TxRequest request) async {
    final result = await _client.call('issue-tokens', request.toJson());
    return TxResponse.fromJson(result);
  }

  /// submits a transaction without routing it. INTENDED FOR INTERNAL USE ONLY
  Future<TxResponse> executeLocal(ExecuteRequest request) async {
    final result = await _client.call('execute-local', request.toJson());
    return TxResponse.fromJson(result);
  }

  /// submits a SendTokens transaction
  Future<TxResponse> executeSendTokens(TxRequest request) async {
    final result = await _client.call('send-tokens', request.toJson());
    return TxResponse.fromJson(result);
  }

  /// submits an UpdateAccountAuth transaction
  Future<TxResponse> executeUpdateAccountAuth(TxRequest request) async {
    final result = await _client.call('update-account-auth', request.toJson());
    return TxResponse.fromJson(result);
  }

  /// submits an UpdateKey transaction
  Future<TxResponse> executeUpdateKey(TxRequest request) async {
    final result = await _client.call('update-key', request.toJson());
    return TxResponse.fromJson(result);
  }

  /// submits an UpdateKeyPage transaction
  Future<TxResponse> executeUpdateKeyPage(TxRequest request) async {
    final result = await _client.call('update-key-page', request.toJson());
    return TxResponse.fromJson(result);
  }

  /// submits a WriteData transaction
  Future<TxResponse> executeWriteData(TxRequest request) async {
    final result = await _client.call('write-data', request.toJson());
    return TxResponse.fromJson(result);
  }

  /// submits a WriteDataTo transaction
  Future<TxResponse> executeWriteDataTo(TxRequest request) async {
    final result = await _client.call('write-data-to', request.toJson());
    return TxResponse.fromJson(result);
  }

  /// requests tokens from the ACME faucet
  Future<TxResponse> faucet(protocol.AcmeFaucet request) async {
    final result = await _client.call('faucet', request.toJson());
    return TxResponse.fromJson(result);
  }

  /// queries network metrics, such as transactions per second
  Future<ChainQueryResponse> metrics(MetricsQuery request) async {
    final result = await _client.call('metrics', request.toJson());
    return ChainQueryResponse.fromJson(result);
  }

  /// queries an account or account chain by URL
  Future<dynamic> query(GeneralQuery request) async {
    final result = await _client.call('query', request.toJson());
    return result;
  }

  /// queries an entry on an account's data chain
  Future<ChainQueryResponse> queryData(DataEntryQuery request) async {
    final result = await _client.call('query-data', request.toJson());
    return ChainQueryResponse.fromJson(result);
  }

  /// queries a range of entries on an account's data chain
  Future<MultiResponse> queryDataSet(DataEntrySetQuery request) async {
    final result = await _client.call('query-data-set', request.toJson());
    return MultiResponse.fromJson(result);
  }

  /// queries the directory entries of an account
  Future<MultiResponse> queryDirectory(DirectoryQuery request) async {
    final result = await _client.call('query-directory', request.toJson());
    return MultiResponse.fromJson(result);
  }

  /// queries the location of a key within an account's key book(s)
  Future<ChainQueryResponse> queryKeyPageIndex(
      KeyPageIndexQuery request) async {
    final result = await _client.call('query-key-index', request.toJson());
    return ChainQueryResponse.fromJson(result);
  }

  /// queries an account's major blocks
  Future<MultiResponse> queryMajorBlocks(MajorBlocksQuery request) async {
    final result = await _client.call('query-major-blocks', request.toJson());
    return MultiResponse.fromJson(result);
  }

  /// queries an account's minor blocks
  Future<MultiResponse> queryMinorBlocks(MinorBlocksQuery request) async {
    final result = await _client.call('query-minor-blocks', request.toJson());
    return MultiResponse.fromJson(result);
  }

  Future<TransactionQueryResponse> querySynth(
      SyntheticTransactionRequest request) async {
    final result = await _client.call('query-synth', request.toJson());
    return TransactionQueryResponse.fromJson(result);
  }

  /// queries a transaction by ID
  Future<TransactionQueryResponse> queryTx(TxnQuery request) async {
    final result = await _client.call('query-tx', request.toJson());
    return TransactionQueryResponse.fromJson(result);
  }

  /// queries an account's transaction history
  Future<MultiResponse> queryTxHistory(TxHistoryQuery request) async {
    final result = await _client.call('query-tx-history', request.toJson());
    return MultiResponse.fromJson(result);
  }

  /// queries a transaction by ID
  Future<TransactionQueryResponse> queryTxLocal(TxnQuery request) async {
    final result = await _client.call('query-tx-local', request.toJson());
    return TransactionQueryResponse.fromJson(result);
  }

  /// queries the status of the node
  Future<StatusResponse> status() async {
    final result = await _client.call('status', {});
    return StatusResponse.fromJson(result);
  }

  /// queries the software version of the node
  Future<ChainQueryResponse> version() async {
    final result = await _client.call('version', {});
    return ChainQueryResponse.fromJson(result);
  }

  /// Execute a transaction directly
  Future<SubmitResponse> execute(SubmitRequest request) async {
    final result = await _client.call('execute', request.toJson());
    return SubmitResponse.fromJson(result);
  }

  Future<api.Record> query(api.Query request) async {
    final result = await _client.call('', request.toJson());
    return api.Record.fromJson(result);
  }

  /// Query block information
  Future<BlockResponse> queryBlock(BlockQuery request) async {
    final result = await _client.call('query-block', request.toJson());
    return BlockResponse.fromJson(result);
  }

  /// Query chain entries
  Future<ChainResponse> queryChain(ChainQuery request) async {
    final result = await _client.call('query-chain', request.toJson());
    return ChainResponse.fromJson(result);
  }

  /// Submit a transaction
  Future<SubmitResponse> submit(SubmitRequest request) async {
    final result = await _client.call('submit', request.toJson());
    return SubmitResponse.fromJson(result);
  }

  /// Submit multiple transactions
  Future<SubmitResponse> submitMulti(SubmitRequest request) async {
    final result = await _client.call('submit-multi', request.toJson());
    return SubmitResponse.fromJson(result);
  }

  Future<dynamic> queryV3() async {
    final result = await _client.call('query', {});
    return result;
  }

  /// Close the underlying HTTP client
  void close() {
    _client.close();
  }
}
