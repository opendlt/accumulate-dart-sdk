// GENERATED BY Accumulate gen-sdk. DO NOT EDIT.

import 'dart:convert';
import 'dart:math';

import 'package:http/http.dart' as http;
import 'package:meta/meta.dart';

/// JSON-RPC 2.0 client implementation
class JsonRpcClient {
  final String _serverUrl;
  final http.Client _httpClient;
  final Random _random = Random();
  final bool _ownHttpClient;

  JsonRpcClient(this._serverUrl, {http.Client? httpClient})
      : _httpClient = httpClient ?? http.Client(),
        _ownHttpClient = httpClient == null;

  /// Make a JSON-RPC call
  Future<dynamic> call(String method, [dynamic params]) async {
    final id = _random.nextInt(1000000);
    final request = {
      'jsonrpc': '2.0',
      'method': method,
      'id': id,
      if (params != null) 'params': params,
    };

    final response = await _httpClient.post(
      Uri.parse(_serverUrl),
      headers: {
        'Content-Type': 'application/json',
      },
      body: jsonEncode(request),
    );

    if (response.statusCode != 200) {
      throw JsonRpcException(
        'HTTP ${response.statusCode}: ${response.reasonPhrase}',
        code: response.statusCode,
      );
    }

    final Map<String, dynamic> responseData;
    try {
      responseData = jsonDecode(response.body);
    } catch (e) {
      throw JsonRpcException('Invalid JSON response: $e');
    }

    if (responseData.containsKey('error')) {
      final error = responseData['error'];
      throw JsonRpcException(
        error['message'] ?? 'Unknown error',
        code: error['code'],
        data: error['data'],
      );
    }

    return responseData['result'];
  }

  /// Make a batch JSON-RPC call
  Future<List<dynamic>> batch(List<JsonRpcRequest> requests) async {
    final batchRequest = requests.map((req) => {
      'jsonrpc': '2.0',
      'method': req.method,
      'id': req.id,
      if (req.params != null) 'params': req.params,
    }).toList();

    final response = await _httpClient.post(
      Uri.parse(_serverUrl),
      headers: {
        'Content-Type': 'application/json',
      },
      body: jsonEncode(batchRequest),
    );

    if (response.statusCode != 200) {
      throw JsonRpcException(
        'HTTP ${response.statusCode}: ${response.reasonPhrase}',
        code: response.statusCode,
      );
    }

    final List<dynamic> responseData;
    try {
      responseData = jsonDecode(response.body);
    } catch (e) {
      throw JsonRpcException('Invalid JSON response: $e');
    }

    final results = <dynamic>[];
    for (final item in responseData) {
      if (item.containsKey('error')) {
        final error = item['error'];
        throw JsonRpcException(
          error['message'] ?? 'Unknown error',
          code: error['code'],
          data: error['data'],
        );
      }
      results.add(item['result']);
    }

    return results;
  }

  /// Close the HTTP client
  void close() {
    if (_ownHttpClient) {
      _httpClient.close();
    }
  }
}

/// JSON-RPC request for batch operations
@immutable
class JsonRpcRequest {
  final String method;
  final dynamic params;
  final int id;

  const JsonRpcRequest(this.method, this.params, this.id);
}

/// JSON-RPC exception
class JsonRpcException implements Exception {
  final String message;
  final int? code;
  final dynamic data;

  const JsonRpcException(this.message, {this.code, this.data});

  @override
  String toString() {
    if (code != null) {
      return 'JsonRpcException($code): $message';
    }
    return 'JsonRpcException: $message';
  }
}