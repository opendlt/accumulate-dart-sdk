// GENERATED BY Accumulate gen-sdk. DO NOT EDIT.

import 'dart:convert';
import 'dart:typed_data';

{{range .Types}}
/// {{.Name}} type definition
class {{dartClassName .Name}} {
{{range .Fields}}
  {{if .Optional}}final {{dartType .Type}}? {{camelCase .Name}};{{else}}final {{dartType .Type}} {{camelCase .Name}};{{end}}
{{end}}

  const {{dartClassName .Name}}({
{{range .Fields}}
    {{if .Optional}}this.{{camelCase .Name}},{{else}}required this.{{camelCase .Name}},{{end}}
{{end}}
  });

  factory {{dartClassName .Name}}.fromJson(Map<String, dynamic> json) {
    return {{dartClassName .Name}}(
{{range .Fields}}
      {{camelCase .Name}}: {{if .Optional}}json['{{.Name}}'] != null ? {{end}}{{if eq .Type "[]byte"}}base64Decode(json['{{.Name}}']){{else if .List}}(json['{{.Name}}'] as List?)?.map((e) => {{dartType .Type}}.fromJson(e)).toList(){{else if ne (dartType .Type) "String" "int" "double" "bool"}}{{dartType .Type}}.fromJson(json['{{.Name}}']){{else}}json['{{.Name}}']{{end}}{{if .Optional}} : null{{end}},
{{end}}
    );
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = {};
{{range .Fields}}
    {{if .Optional}}if ({{camelCase .Name}} != null) {
      {{if eq .Type "[]byte"}}data['{{.Name}}'] = base64Encode({{camelCase .Name}}!);{{else if .List}}data['{{.Name}}'] = {{camelCase .Name}}!.map((e) => e.toJson()).toList();{{else if ne (dartType .Type) "String" "int" "double" "bool"}}data['{{.Name}}'] = {{camelCase .Name}}!.toJson();{{else}}data['{{.Name}}'] = {{camelCase .Name}};{{end}}
    }{{else}}{{if eq .Type "[]byte"}}data['{{.Name}}'] = base64Encode({{camelCase .Name}});{{else if .List}}data['{{.Name}}'] = {{camelCase .Name}}.map((e) => e.toJson()).toList();{{else if ne (dartType .Type) "String" "int" "double" "bool"}}data['{{.Name}}'] = {{camelCase .Name}}.toJson();{{else}}data['{{.Name}}'] = {{camelCase .Name}};{{end}}{{end}}
{{end}}
    return data;
  }

  @override
  String toString() => jsonEncode(toJson());

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is {{dartClassName .Name}} &&
      runtimeType == other.runtimeType &&
{{range $i, $field := .Fields}}{{if gt $i 0}} &&
      {{end}}{{camelCase $field.Name}} == other.{{camelCase $field.Name}}{{end}};

  @override
  int get hashCode => {{range $i, $field := .Fields}}{{if gt $i 0}} ^
      {{end}}{{camelCase $field.Name}}.hashCode{{end}};
}

{{end}}

{{range .Enums}}
/// {{.Name}} enumeration
enum {{dartClassName .Name}} {
{{range .Values}}
  {{camelCase .Name}},
{{end}}
}

extension {{dartClassName .Name}}Extension on {{dartClassName .Name}} {
  String get value {
    switch (this) {
{{range .Values}}
      case {{dartClassName $.Name}}.{{camelCase .Name}}:
        return '{{.Value}}';
{{end}}
    }
  }

  static {{dartClassName .Name}}? fromString(String value) {
    switch (value) {
{{range .Values}}
      case '{{.Value}}':
        return {{dartClassName $.Name}}.{{camelCase .Name}};
{{end}}
      default:
        return null;
    }
  }
}
{{end}}