import 'package:test/test.dart';
import 'dart:io';
import 'package:http/http.dart' as http;

// Import generated client from quarantined area (not public API)
// Note: This is only for testing/validation, not for public use
String get testOutputDir {
  final envPath = Platform.environment['SDK_TEST_OUTPUT'];
  if (envPath != null) return envPath;

  // Default to platform-appropriate temp directory
  if (Platform.isWindows) {
    return r'C:\temp\opendlt-dart-sdk-test-output';
  } else {
    return '/tmp/opendlt-dart-sdk-test-output';
  }
}

void main() {
  group('Quarantined Generated Client Tests', () {
    test('Generated client files exist in test output', () {
      final clientFile = File('$testOutputDir/lib/dart_client.dart');
      final jsonRpcFile = File('$testOutputDir/lib/dart_json_rpc_client.dart');
      final typesFile = File('$testOutputDir/lib/dart_types.dart');
      final pubspecFile = File('$testOutputDir/lib/pubspec.yaml');

      expect(clientFile.existsSync(), isTrue, reason: 'dart_client.dart should exist in test_output');
      expect(jsonRpcFile.existsSync(), isTrue, reason: 'dart_json_rpc_client.dart should exist in test_output');
      expect(typesFile.existsSync(), isTrue, reason: 'dart_types.dart should exist in test_output');
      expect(pubspecFile.existsSync(), isTrue, reason: 'pubspec.yaml should exist in test_output');

      print('✓ All generated files exist in quarantined test_output directory');
    });

    test('Generated files are properly isolated from public lib', () {
      // Verify no generated files exist in public lib
      final publicLibDir = Directory('lib');
      final files = publicLibDir.listSync(recursive: true)
          .where((f) => f is File && f.path.endsWith('.dart'))
          .map((f) => f.path);

      // No api_unified or api_v2 directories should exist
      final hasGeneratedDirs = files.any((path) =>
          path.contains('api_unified') || path.contains('api_v2'));
      expect(hasGeneratedDirs, isFalse,
          reason: 'No generated API directories should exist in public lib');

      // No generated types.dart or accumulate_client.dart should exist in public lib root
      final hasGeneratedFiles = files.any((path) =>
          path.endsWith('lib\\types.dart') || path.endsWith('lib\\accumulate_client.dart'));
      expect(hasGeneratedFiles, isFalse,
          reason: 'No generated root files should exist in public lib');

      print('✓ Public lib is clean of generated files');
    });

    test('Generated client structure is valid', () {
      final clientContent = File('$testOutputDir/lib/dart_client.dart').readAsStringSync();

      // Verify it has expected structure
      expect(clientContent, contains('class AccumulateClient'));
      expect(clientContent, contains('GENERATED BY Accumulate gen-sdk'));
      expect(clientContent, contains('DO NOT EDIT'));

      // Verify it has key API methods
      expect(clientContent, contains('describe()'));
      expect(clientContent, contains('execute('));
      expect(clientContent, contains('query('));
      expect(clientContent, contains('faucet('));

      print('✓ Generated client has expected structure and methods');
    });

    test('Template mechanism works correctly', () {
      // This test verifies that our external template system is working
      // by checking that the generated files contain expected patterns

      final jsonRpcContent = File('$testOutputDir/lib/dart_json_rpc_client.dart')
          .readAsStringSync();
      final typesContent = File('$testOutputDir/lib/dart_types.dart')
          .readAsStringSync();

      // Verify JSON-RPC client structure
      expect(jsonRpcContent, contains('class JsonRpcClient'));
      expect(jsonRpcContent, contains('class JsonRpcException'));

      // Verify types structure
      expect(typesContent, contains('class Url'));
      expect(typesContent, contains('class Hash'));

      print('✓ Template mechanism generates expected code structure');
    });

    // TODO: Add tests that actually compile and run generated code
    // This would require setting up a separate pub workspace for the generated code
  });
}