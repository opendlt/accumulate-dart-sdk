// GENERATED BY Accumulate gen-sdk. DO NOT EDIT.

import 'dart:convert';
import 'dart:typed_data';

import 'package:http/http.dart' as http;

import 'src/json_rpc_client.dart';
import 'types.dart';

/// Accumulate JSON-RPC API client for {{.APIVersion}}
class AccumulateClient {
  final JsonRpcClient _client;

  AccumulateClient(String serverUrl, {http.Client? httpClient})
      : _client = JsonRpcClient(serverUrl, httpClient: httpClient);

  AccumulateClient.withClient(JsonRpcClient client) : _client = client;

{{range .Methods}}
{{- if .Description}}
  /// {{.Description}}{{end}}
{{- if .Experimental}}
  ///
  /// WARNING: EXPERIMENTAL!{{end}}
{{- if eq .Kind "execute"}}
  Future<TxResponse> {{dartMethodName .Name}}(TxRequest request) async {
    final result = await _client.call('{{.RPC}}', request.toJson());
    return TxResponse.fromJson(result);
  }
{{else if .Input}}
  Future<{{dartType .Output}}> {{dartMethodName .Name}}({{dartType .Input}} request) async {
    final result = await _client.call('{{.RPC}}', request.toJson());
    return {{dartType .Output}}.fromJson(result);
  }
{{else}}
  Future<{{dartType .Output}}> {{dartMethodName .Name}}() async {
    final result = await _client.call('{{.RPC}}', {});
    return {{dartType .Output}}.fromJson(result);
  }
{{end}}
{{end}}

  /// Close the underlying HTTP client
  void close() {
    _client.close();
  }
}